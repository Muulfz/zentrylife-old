---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Muulfz.
--- DateTime: 11/30/2018 7:19 PM
local cfg = module("cfg/Modules/Shop/adv_garages")
local cfg_inventory = module("cfg/Modules/inventory")
local lang = zRP.lang.adv_garages


zRP.prepare("zRP/move_vehicle", "UPDATE zrp_user_vehicles SET user_id = @tuser_id WHERE user_id = @user_id AND vehicle = @vehicle")

zRP.prepare("zRP/vehicles_seized",[[
CREATE TABLE IF NOT EXISTS zrp_seized_vehicles(
    user_id INTEGER,
    vehicle VARCHAR(255),
    reason VARCHAR(255),
    seized_agent INTEGER,
  CONSTRAINT pk_seized_vehicles PRIMARY KEY(user_id,vehicle),
  CONSTRAINT fk_seized_vehicles_users FOREIGN KEY(user_id) REFERENCES zrp_users(id) ON DELETE CASCADE,
  CONSTRAINT fk_agente_seized_vehicles_users FOREIGN KEY(seized_agent) REFERENCES zrp_users(id) ON DELETE CASCADE
);
]])


zRP.prepare("zRP/add_seized_vehicle","INSERT IGNORE INTO zrp_seized_vehicles(user_id,vehicle,reason,seized_agent) VALUES(@user_id, @vehicle, @reason, @seized_agent)")
zRP.prepare("zRP/remove_seized_vehicle","DELETE FROM zrp_seized_vehicles WHERE user_id = @user_id AND vehicle = @vehicle")

local adv_garages =  cfg.adv_garages
local items = cfg.items
local cooldown = {}

Citizen.CreateThread(function()
    zRP.execute("zRP/vehicles_seized")
    for k,v in pairs(items) do
        zRP.defInventoryItem(k,v[1],v[2],v[3],v[4])
    end
end)

function zRP.advGaragesResetCooldown()
    cooldown[source] = false
end



-- build garages menus
function zRP.advGaragesOpen(source, gid, pos)
    local user_id = zRP.getUserId(source)
    local vehicles = adv_garages[gid]
    local veh_type = vehicles._config.vtype
    local gtypes = vehicles._config.gtype
    local gpay = vehicles._config.gpay
    local mods = vehicles._shop
    local menu = {
        name=lang.garage.title({gid}),
        css={top = "75px", header_color="rgba(255,125,0,0.75)"}
    }

    for _,gtype in pairs(gtypes) do
        if gtype == "showroom" then
            menu[lang.garage.showroom.title()] = {function(player,choice)
                local user_id = zRP.getUserId(source)
                if user_id then
                    -- build nested menu
                    local kitems = {}
                    local bought = false
                    local submenu = {name=lang.garage.title({lang.garage.buy.title()}), css={top="75px",header_color="rgba(255,125,0,0.75)"}}
                    submenu.onclose = function()
                        zRP.openMenu(source,menu)
                        if not bought then
                            zRPclient.advGarageDespawnShowroomVehicle(source)  --TODO Trocar nome no zRPclient
                        end
                        zRPclient.advGarageProtectVehicle(source,false) --TODO trocar nome no zRPclient
                    end

                    local choose = function(player, choice, mod)
                        local vname = kitems[choice]
                        if vname then
                            -- buy vehicle
                            local vehicle = vehicles[vname]
                            if vehicle then
                                if mod == 0 then
                                    local ok = zRP.request(source, lang.garage.buy.request(), 10)
                                    if ok then
                                        local price = vehicle[2]
                                        local item = vehicle[4]
                                        local payment = false
                                        if item then
                                            payment = zRP.tryGetInventoryItem(user_id,item,price,true)
                                        elseif gpay == "bank" then
                                            payment = zRP.tryFullPayment(user_id,price)
                                        elseif gpay == "wallet" then
                                            payment = zRP.tryPayment(user_id,price)
                                        end
                                        if payment then
                                            local name, custom = zRPclient.advGarageGetVehicleMods(source, veh_type) --TODO trocar nome no zRPclient
                                            -- print("custom:u"..user_id.."veh_"..vname.." = " .. json.encode(custom)) -- uncomment to see data structure upon save
                                            zRP.setSData("custom:u"..user_id.."veh_"..vname, json.encode(custom))
                                            zRP.execute("zRP/add_vehicle", {user_id = user_id, vehicle = vname})
                                            zRPclient.advGarageDespawnShowroomVehicle(source) --TODO trocar nome no zRPclient
                                            if zRPclient.advGarageSpawnGarageVehicle(source,veh_type,vname,pos) then -- TODO trocar nome no zRPclient
                                                zRPclient.advGaragesetVehicleMods(source,custom) --TODO trocar nome no zRPclients
                                            else
                                                zRPclient.notify(source,lang.garage.personal.out())
                                            end
                                            bought = true
                                            if not item and price > 0 then
                                                zRPclient.notify(source,lang.money.paid({price}))
                                            end
                                            zRP.closeMenu(source)
                                        else
                                            if not item then
                                                zRPclient.notify(source,lang.money.not_enough())
                                            end
                                        end
                                    else
                                        zRPclient.notify(source,lang.common.request_refused())
                                    end
                                elseif not cooldown[source] then
                                    cooldown[source] = true
                                    if zRPclient.advGarageSpawnShowroomVehicle(source,vname, pos) then -- TODO trocar nome no zRPclient
                                        zRPclient.advGarageProtectVehicle(source,true) -- TODO trocar nome no zRPclient
                                    end
                                end
                            end
                        end
                    end

                    -- get player owned vehicles (indexed by vehicle type name in lower case)
                    local _pvehicles = zRP.query("zRP/get_vehicles", {user_id = user_id})
                    local pvehicles = {}
                    for k,v in pairs(_pvehicles) do
                        pvehicles[string.lower(v.vehicle)] = true
                    end

                    -- for each existing vehicle in the garage group
                    for k,v in pairs(vehicles) do
                        if k ~= "_config" and k ~= "_shop" and pvehicles[string.lower(k)] == nil then -- not already owned
                            local price = math.max(v[2],0)
                            if v[4] then
                                submenu[v[1]] = {choose,lang.garage.buy.item({zRP.getItemName(v[4]),price,v[3]})}
                            else
                                submenu[v[1]] = {choose,lang.garage.buy.info({price,v[3]})}
                            end
                            kitems[v[1]] = k
                        end
                    end

                    zRP.openMenu(source,submenu)
                end
            end,lang.garage.showroom.description()}
        elseif gtype == "personal" then
            menu[lang.garage.owned.title()] = {function(player,choice)
                local user_id = zRP.getUserId(source)
                if user_id then
                    -- init tmpdata for rents
                    local tmpdata = zRP.getUserTmpTable(user_id)
                    if not tmpdata.rent_vehicles then
                        tmpdata.rent_vehicles = {}
                    end


                    -- build nested menu
                    local kitems = {}
                    local submenu = {name=lang.garage.title({lang.garage.owned.title()}), css={top="75px",header_color="rgba(255,125,0,0.75)"}}
                    submenu.onclose = function()
                        zRP.openMenu(source,menu)
                    end

                    -- get player owned vehicles
                    local pvehicles = zRP.query("zRP/get_vehicles", {user_id = user_id})
                    -- add rents to whitelist
                    for k,v in pairs(tmpdata.rent_vehicles) do
                        if v then -- check true, prevent future neolua issues
                            table.insert(pvehicles,{vehicle = k})
                        end
                    end

                    local choose = function(player, choice)
                        local vname = kitems[choice]
                        if vname then
                            -- spawn vehicle
                            zRP.closeMenu(source)
                            local data = zRP.getSData("custom:u"..user_id.."veh_"..vname)
                            local custom = json.decode(data)
                            if not cooldown[source] then
                                cooldown[source] = true
                                if Gclient.spawnGarageVehicle(source,veh_type,vname,pos) then
                                    Gclient.setVehicleMods(source,custom)
                                else
                                    zRPclient.notify(source,lang.garage.personal.out())
                                end
                            end
                        end
                    end

                    for k,v in pairs(pvehicles) do
                        local vehicle
                        for x,garage in pairs(adv_garages) do
                            if garage._config.vtype == veh_type then
                                vehicle = garage[v.vehicle]
                            end
                            if vehicle then break end
                        end

                        if vehicle then
                            submenu[vehicle[1]] = {choose,vehicle[3]}
                            kitems[vehicle[1]] = v.vehicle
                        end
                    end

                    zRP.openMenu(source,submenu)
                end
            end,lang.garage.owned.description()}

            menu[lang.garage.store.title()] = {function(player,choice)
                if Gclient.despawnGarageVehicle(source,veh_type,15) then
                    zRPclient.notify(source,lang.garage.personal.stored())
                else
                    zRPclient.notify(source,lang.garage.personal.toofar())
                end
            end, lang.garage.store.description()}
        elseif gtype == "store" then
            menu[lang.garage.buy.title()] = {function(player,choice)
                local user_id = zRP.getUserId(source)
                if user_id then
                    -- build nested menu
                    local kitems = {}
                    local submenu = {name=lang.garage.title({lang.garage.buy.title()}), css={top="75px",header_color="rgba(255,125,0,0.75)"}}
                    submenu.onclose = function()
                        zRP.openMenu(source,menu)
                    end

                    local choose = function(player, choice)
                        local vname = kitems[choice]
                        if vname then
                            -- buy vehicle
                            local vehicle = vehicles[vname]
                            if vehicle then
                                local ok = zRP.request(source, lang.garage.buy.request(), 10)
                                if ok then
                                    local price = vehicle[2]
                                    local item = vehicle[4]
                                    local payment = false
                                    if item then
                                        payment = zRP.tryGetInventoryItem(user_id,item,price,true)
                                    elseif gpay == "bank" then
                                        payment = zRP.tryFullPayment(user_id,price)
                                    elseif gpay == "wallet" then
                                        payment = zRP.tryPayment(user_id,price)
                                    end
                                    if payment then
                                        zRP.execute("zRP/add_vehicle", {user_id = user_id, vehicle = vname})
                                        -- spawn vehicle
                                        if not Gclient.spawnGarageVehicle(source,veh_type,vname,pos) then
                                            zRPclient.notify(source,lang.garage.personal.out())
                                        end

                                        if not item and price > 0 then
                                            zRPclient.notify(source,lang.money.paid({price}))
                                        end
                                        zRP.closeMenu(source)
                                    else
                                        if not item then
                                            zRPclient.notify(source,lang.money.not_enough())
                                        end
                                    end
                                else
                                    zRPclient.notify(source,lang.common.request_refused())
                                end
                            end
                        end
                    end

                    -- get player owned vehicles (indexed by vehicle type name in lower case)
                    local _pvehicles = zRP.query("zRP/get_vehicles", {user_id = user_id})
                    local pvehicles = {}
                    for k,v in pairs(_pvehicles) do
                        pvehicles[string.lower(v.vehicle)] = true
                    end

                    -- for each existing vehicle in the garage group
                    for k,v in pairs(vehicles) do
                        if k ~= "_config" and k ~= "_shop" and pvehicles[string.lower(k)] == nil then -- not already owned
                            local price = math.max(v[2],0)
                            if v[4] then
                                submenu[v[1]] = {choose,lang.garage.buy.item({zRP.getItemName(v[4]),price,v[3]})}
                            else
                                submenu[v[1]] = {choose,lang.garage.buy.info({price,v[3]})}
                            end
                            kitems[v[1]] = k
                        end
                    end

                    zRP.openMenu(source,submenu)
                end
            end,lang.garage.buy.description()}

            menu[lang.garage.sell.title()] = {function(player,choice)
                local user_id = zRP.getUserId(source)
                if user_id then

                    -- build nested menu
                    local kitems = {}
                    local submenu = {name=lang.garage.title({lang.garage.sell.title()}), css={top="75px",header_color="rgba(255,125,0,0.75)"}}
                    submenu.onclose = function()
                        zRP.openMenu(source,menu)
                    end

                    local choose = function(player, choice)
                        local vname = kitems[choice]
                        if vname then
                            -- sell vehicle
                            local vehicle = vehicles[vname]
                            if vehicle then
                                local rows = zRP.query("zRP/get_vehicle", {user_id = user_id, vehicle = vname})
                                if #rows > 0 then -- has vehicle
                                    local price = math.ceil(vehicle[2]*cfg.sell_factor)
                                    local item = vehicle[4]
                                    if item then
                                        zRP.giveInventoryItem(user_id,item,price,true)
                                    elseif gpay == "bank" then
                                        zRP.giveBankMoney(user_id,price)
                                    elseif gpay == "wallet" then
                                        zRP.giveMoney(user_id,price)
                                    end
                                    zRP.execute("zRP/remove_vehicle", {user_id = user_id, vehicle = vname})
                                    zRP.setSData("custom:u"..user_id.."veh_"..vname, json.encode())

                                    if not item and price > 0 then
                                        zRPclient.notify(source,lang.money.received({price}))
                                    end

                                    local vtype, vehicle = Gclient.isOwnedVehicleOut(source, vname)
                                    if vtype and vehicle then
                                        if Gclient.despawnGarageVehicle(source,vtype,100000) then
                                            zRPclient.notify(source,lang.garage.personal.sold())
                                        end
                                    end

                                    zRP.closeMenu(source)
                                else
                                    zRPclient.notify(source,lang.common.not_found())
                                end
                            end
                        end
                    end

                    -- get player owned vehicles (indexed by vehicle type name in lower case)
                    local _pvehicles = zRP.query("zRP/get_vehicles", {user_id = user_id})
                    local pvehicles = {}
                    for k,v in pairs(_pvehicles) do
                        pvehicles[string.lower(v.vehicle)] = true
                    end

                    -- for each existing vehicle in the garage group
                    for k,v in pairs(pvehicles) do
                        local vehicle = vehicles[k]
                        if vehicle then -- not already owned
                            local price = math.ceil(vehicle[2]*cfg.sell_factor)
                            if vehicle[4] then
                                submenu[vehicle[1]] = {choose,lang.garage.buy.item({zRP.getItemName(vehicle[4]),price,vehicle[3]})}
                            else
                                submenu[vehicle[1]] = {choose,lang.garage.buy.info({price,vehicle[3]})}
                            end
                            kitems[vehicle[1]] = k
                        end
                    end

                    zRP.openMenu(source,submenu)
                end
            end,lang.garage.sell.description()}
        elseif gtype == "rental" then
            menu[lang.garage.rent.title()] = {function(player,choice)
                local user_id = zRP.getUserId(source)
                if user_id then
                    -- init tmpdata for rents
                    local tmpdata = zRP.getUserTmpTable(user_id)
                    if tmpdata.rent_vehicles == nil then
                        tmpdata.rent_vehicles = {}
                    end

                    -- build nested menu
                    local kitems = {}
                    local submenu = {name=lang.garage.title({lang.garage.rent.title()}), css={top="75px",header_color="rgba(255,125,0,0.75)"}}
                    submenu.onclose = function()
                        zRP.openMenu(source,menu)
                    end

                    local choose = function(player, choice)
                        local vname = kitems[choice]
                        if vname then
                            -- rent vehicle
                            local vehicle = vehicles[vname]
                            if vehicle then
                                local price = math.ceil(vehicle[2]*cfg.rent_factor)
                                local item = vehicle[4]
                                local payment = false
                                if item then
                                    payment = zRP.tryGetInventoryItem(user_id,item,price,true)
                                elseif gpay == "bank" then
                                    payment = zRP.tryFullPayment(user_id,price)
                                elseif gpay == "wallet" then
                                    payment = zRP.tryPayment(user_id,price)
                                end
                                if payment then
                                    -- add vehicle to rent tmp data
                                    tmpdata.rent_vehicles[vname] = true
                                    -- spawn vehicle
                                    if not Gclient.spawnGarageVehicle(source,veh_type,vname,pos) then
                                        zRPclient.notify(source,lang.garage.personal.out())
                                    end

                                    if not item and price > 0 then
                                        zRPclient.notify(source,lang.money.paid({price}))
                                    end

                                    zRPclient.notify(source,lang.money.paid({price}))
                                    zRP.closeMenu(source)
                                else
                                    if not item then
                                        zRPclient.notify(source,lang.money.not_enough())
                                    end
                                end
                            end
                        end
                    end

                    -- get player owned vehicles (indexed by vehicle type name in lower case)
                    local _pvehicles = zRP.query("zRP/get_vehicles", {user_id = user_id})
                    local pvehicles = {}
                    for k,v in pairs(_pvehicles) do
                        pvehicles[string.lower(v.vehicle)] = true
                    end

                    -- add rents to blacklist
                    for k,v in pairs(tmpdata.rent_vehicles) do
                        pvehicles[string.lower(k)] = true
                    end

                    -- for each existing vehicle in the garage group
                    for k,v in pairs(vehicles) do
                        if k ~= "_config" and k ~= "_shop" and pvehicles[string.lower(k)] == nil then -- not already owned
                            local price = math.ceil(v[2]*cfg.rent_factor)
                            if v[4] then
                                submenu[v[1]] = {choose,lang.garage.buy.item({zRP.getItemName(v[4]),price,v[3]})}
                            else
                                submenu[v[1]] = {choose,lang.garage.buy.info({price,v[3]})}
                            end
                            kitems[v[1]] = k
                        end
                    end

                    zRP.openMenu(source,submenu)
                end
            end,lang.garage.rent.description()}
            menu[lang.garage.store.title()] = {function(player,choice)
                if Gclient.despawnGarageVehicle(source,veh_type,15) then
                    zRPclient.notify(source,lang.garage.personal.stored())
                else
                    zRPclient.notify(source,lang.garage.personal.toofar())
                end
            end, lang.garage.store.description()}
        elseif gtype == "shop" then
            menu[lang.garage.shop.title()] = {function(player,choice)
                print("AAAA")
                local user_id = zRP.getUserId(source)
                local tosub = false
                if user_id then
                    -- build nested menu
                    local submenu = {name=lang.garage.title({lang.garage.shop.title()}), css={top="75px",header_color="rgba(255,125,0,0.75)"}}

                    -- payment and saving
                    submenu.onclose = function()
                        if not tosub then
                            zRP.openMenu(source,menu)
                            Gclient.protectVehicle(source,false)
                        end
                    end

                    local ch_color = function(player, choice)
                        local old_vname, old_custom = Gclient.getVehicleMods(source, veh_type)
                        local subsubmenu = {name=lang.garage.title({lang.garage.shop.colour.title()}), css={top="75px",header_color="rgba(255,125,0,0.75)"}}
                        subsubmenu.onclose = function()
                            tosub = false
                            local vname, custom = Gclient.getVehicleMods(source, veh_type)
                            local price = 0
                            if custom then
                                for k,v in pairs(custom.colour.custom.primary) do
                                    local old = old_custom.colour.custom.primary[k]
                                    if mod then
                                        if old ~= v then price = price + cfg.price.colour end -- modification
                                    end
                                end
                                for k,v in pairs(custom.colour.custom.secondary) do
                                    local old = old_custom.colour.custom.secondary[k]
                                    if mod then
                                        if old ~= v then price = price + cfg.price.colour end -- modification
                                    end
                                end
                                if custom.colour.primary ~= old_custom.colour.primary then price = price + cfg.price.colour end -- modification
                                if custom.colour.secondary ~= old_custom.colour.secondary then price = price + cfg.price.colour end -- modification
                                local payment = false
                                if gpay == "bank" then
                                    payment = zRP.tryFullPayment(user_id,price)
                                elseif gpay == "wallet" then
                                    payment = zRP.tryPayment(user_id,price)
                                end
                                if payment then
                                    if vname then
                                        -- print("custom:u"..user_id.."veh_"..vname.." = " .. json.encode(custom)) -- uncomment to see data structure upon save
                                        zRP.setSData("custom:u"..user_id.."veh_"..vname, json.encode(custom))
                                        if price > 0 then
                                            zRPclient.notify(source,lang.money.paid({price}))
                                        end
                                    end
                                else
                                    Gclient.setVehicleMods(source,old_custom)
                                    zRPclient.notify(source,lang.money.not_enough())
                                end
                            end
                            zRP.openMenu(source,submenu)
                        end

                        local ch_pcolor = function(player, choice, mod)
                            Gclient.scrollVehiclePrimaryColour(source,mod)
                        end
                        local ch_scolor = function(player, choice, mod)
                            Gclient.scrollVehicleSecondaryColour(source,mod)
                        end
                        local ch_cpcolor = function(player, choice)
                            local rgb = zRP.prompt(source,"RGB Color(255 255 255):","")
                            rgb = sanitizeString(rgb,"\"[]{}+=?!_()#@%/\\|,.",false)
                            local r,g,b = table.unpack(splitString(rgb, " "))
                            Gclient.setCustomPrimaryColour(source,tonumber(r),tonumber(g),tonumber(b))
                        end
                        local ch_cscolor = function(player, choice)
                            local rgb = zRP.prompt(source,"RGB Color(255 255 255):","")
                            rgb = sanitizeString(rgb,"\"[]{}+=?!_()#@%/\\|,.",false)
                            local r,g,b = table.unpack(splitString(rgb, " "))
                            Gclient.setCustomSecondaryColour(source,tonumber(r),tonumber(g),tonumber(b))
                        end

                        subsubmenu[lang.garage.shop.colour.primary()] = {ch_pcolor,""}
                        subsubmenu[lang.garage.shop.colour.secondary()] = {ch_scolor,""}
                        subsubmenu[lang.garage.shop.colour.custom.primary()] = {ch_cpcolor,""}
                        subsubmenu[lang.garage.shop.colour.custom.secondary()] = {ch_cscolor,""}

                        tosub = true
                        zRP.openMenu(source,subsubmenu)
                    end
                    submenu[lang.garage.shop.colour.title()] = {ch_color,lang.garage.shop.colour.info({})}

                    local ch_extracolor = function(player, choice)
                        local old_vname, old_custom = Gclient.getVehicleMods(source, veh_type)
                        local subsubmenu = {name=lang.garage.title({lang.garage.shop.colour.extra.title()}), css={top="75px",header_color="rgba(255,125,0,0.75)"}}
                        subsubmenu.onclose = function()
                            tosub = false
                            local vname, custom = Gclient.getVehicleMods(source, veh_type)
                            local price = 0
                            if custom then
                                for k,v in pairs(custom.colour.smoke) do
                                    local old = old_custom.colour.smoke[k]
                                    if mod then
                                        if old ~= v then price = price + cfg.price.extra end -- modification
                                    end
                                end
                                if custom.colour.pearlescent ~= old_custom.colour.pearlescent then price = price + cfg.price.extra end -- modification
                                if custom.colour.wheel ~= old_custom.colour.wheel then price = price + cfg.price.extra end -- modification
                                local payment = false
                                if gpay == "bank" then
                                    payment = zRP.tryFullPayment(user_id,price)
                                elseif gpay == "wallet" then
                                    payment = zRP.tryPayment(user_id,price)
                                end
                                if payment then
                                    if vname then
                                        -- print("custom:u"..user_id.."veh_"..vname.." = " .. json.encode(custom)) -- uncomment to see data structure upon save
                                        zRP.setSData("custom:u"..user_id.."veh_"..vname, json.encode(custom))
                                    end
                                    if price > 0 then
                                        zRPclient.notify(source,lang.money.paid({price}))
                                    end
                                else
                                    Gclient.setVehicleMods(source,old_custom)
                                    zRPclient.notify(source,lang.money.not_enough())
                                end
                            end
                            zRP.openMenu(source,submenu)
                        end

                        local ch_pcolor = function(player, choice, mod)
                            Gclient.scrollVehiclePearlescentColour(source,mod)
                        end
                        local ch_wcolor = function(player, choice, mod)
                            Gclient.scrollVehicleWheelColour(source,mod)
                        end
                        local ch_scolor = function(player, choice)
                            local rgb = zRP.prompt(source,"RGB Color(255 255 255):","")
                            rgb = sanitizeString(rgb,"\"[]{}+=?!_()#@%/\\|,.",false)
                            local r,g,b = table.unpack(splitString(rgb, " "))
                            Gclient.setSmokeColour(source,tonumber(r),tonumber(g),tonumber(b))
                        end

                        subsubmenu[lang.garage.shop.colour.extra.pearlescent()] = {ch_pcolor,""}
                        subsubmenu[lang.garage.shop.colour.extra.wheel()] = {ch_wcolor,""}
                        subsubmenu[lang.garage.shop.colour.extra.smoke()] = {ch_scolor,""}

                        tosub = true
                        zRP.openMenu(source,subsubmenu)
                    end
                    submenu[lang.garage.shop.colour.extra.title()] = {ch_extracolor,lang.garage.shop.colour.extra.info({})}

                    local ch_neon = function(player, choice)
                        local old_vname, old_custom = Gclient.getVehicleMods(source, veh_type)
                        local subsubmenu = {name=lang.garage.title({lang.garage.shop.neon.title()}), css={top="75px",header_color="rgba(255,125,0,0.75)"}}
                        subsubmenu.onclose = function()
                            tosub = false
                            local vname, custom = Gclient.getVehicleMods(source, veh_type)
                            local price = 0
                            if custom then
                                for k,v in pairs(custom.neon) do
                                    local old = old_custom.neon[k]
                                    if mod then
                                        if old ~= v then price = price + cfg.price.neon end -- modification
                                    end
                                end
                                for k,v in pairs(custom.colour.neon) do
                                    local old = old_custom.colour.neon[k]
                                    if mod then
                                        if old ~= v then price = price + cfg.price.neon end -- modification
                                    end
                                end
                                local payment = false
                                if gpay == "bank" then
                                    payment = zRP.tryFullPayment(user_id,price)
                                elseif gpay == "wallet" then
                                    payment = zRP.tryPayment(user_id,price)
                                end
                                if payment then
                                    if vname then
                                        -- print("custom:u"..user_id.."veh_"..vname.." = " .. json.encode(custom)) -- uncomment to see data structure upon save
                                        zRP.setSData("custom:u"..user_id.."veh_"..vname, json.encode(custom))
                                    end
                                    if price > 0 then
                                        zRPclient.notify(source,lang.money.paid({price}))
                                    end
                                else
                                    Gclient.setVehicleMods(source,old_custom)
                                    zRPclient.notify(source,lang.money.not_enough())
                                end
                            end
                            zRP.openMenu(source,submenu)
                        end

                        local ch_nleft = function(player, choice)
                            Gclient.toggleNeon(source,0)
                        end
                        local ch_nright = function(player, choice)
                            Gclient.toggleNeon(source,1)
                        end
                        local ch_nfront = function(player, choice)
                            Gclient.toggleNeon(source,2)
                        end
                        local ch_nback = function(player, choice)
                            Gclient.toggleNeon(source,3)
                        end
                        local ch_ncolor = function(player, choice)
                            local rgb = zRP.prompt(source,"RGB Color(255 255 255):","")
                            rgb = sanitizeString(rgb,"\"[]{}+=?!_()#@%/\\|,.",false)
                            local r,g,b = table.unpack(splitString(rgb, " "))
                            Gclient.setNeonColour(source,tonumber(r),tonumber(g),tonumber(b))
                        end

                        subsubmenu[lang.garage.shop.neon.back()] = {ch_nback,""}
                        subsubmenu[lang.garage.shop.neon.front()] = {ch_nfront,""}
                        subsubmenu[lang.garage.shop.neon.left()] = {ch_nleft,""}
                        subsubmenu[lang.garage.shop.neon.right()] = {ch_nright,""}
                        subsubmenu[lang.garage.shop.neon.colour()] = {ch_ncolor,""}

                        tosub = true
                        zRP.openMenu(source,subsubmenu)
                    end
                    submenu[lang.garage.shop.neon.title()] = {ch_neon,lang.garage.shop.neon.info({})}

                    local ch_mods = function(player, choice)
                        local kitems = {}
                        local old_vname, old_custom = Gclient.getVehicleMods(source, veh_type)
                        local subsubmenu = {name=lang.garage.title({lang.garage.shop.mods.title()}), css={top="75px",header_color="rgba(255,125,0,0.75)"}}
                        subsubmenu.onclose = function()
                            tosub = false
                            local vname, custom = Gclient.getVehicleMods(source, veh_type)
                            local price = 0
                            local items = {}
                            if custom then
                                for k,v in pairs(custom.mods) do
                                    local old = old_custom.mods[k]
                                    local mod = mods[k]
                                    if mod then
                                        if old ~= v then
                                            if mod[4] then
                                                items[k] = {mod[4],mod[2]} -- item prices
                                            else price = price + mod[2] end -- modification
                                        end
                                    end
                                end
                                local payment = false
                                local payitems = false
                                if not next(items) then
                                    payitems = true
                                else
                                    for n,i in pairs(items) do
                                        payitems = zRP.tryGetInventoryItem(user_id,i[1],i[2],true)
                                        if not payitems then break end
                                    end
                                end
                                if payitems then
                                    if gpay == "bank" then
                                        payment = zRP.tryFullPayment(user_id,price)
                                    elseif gpay == "wallet" then
                                        payment = zRP.tryPayment(user_id,price)
                                    end
                                    if payment then
                                        if vname then
                                            -- print("custom:u"..user_id.."veh_"..vname.." = " .. json.encode(custom)) -- uncomment to see data structure upon save
                                            zRP.setSData("custom:u"..user_id.."veh_"..vname, json.encode(custom))
                                            if price > 0 then
                                                zRPclient.notify(source,lang.money.paid({price}))
                                            end
                                        end
                                    else
                                        Gclient.setVehicleMods(source,old_custom)
                                        zRPclient.notify(source,lang.money.not_enough())
                                    end
                                end
                            end
                            zRP.openMenu(source,submenu)
                        end

                        local ch_mod = function(player, choice, mod)
                            Gclient.scrollVehicleMods(source,kitems[choice],mod)
                        end
                        -- for each existing vehicle in the garage group
                        for k,v in pairs(mods) do
                            local price = math.max(v[2],0)
                            if v[4] then
                                subsubmenu[v[1]] = {ch_mod,lang.garage.buy.item({zRP.getItemName(v[4]),price,v[3]})}
                            else
                                subsubmenu[v[1]] = {ch_mod,lang.garage.buy.info({price,v[3]})}
                            end
                            kitems[v[1]] = k
                        end
                        tosub = true
                        zRP.openMenu(source,subsubmenu)
                    end
                    submenu[lang.garage.shop.mods.title()] = {ch_mods,lang.garage.shop.mods.info({})}

                    local ch_repair = function(player, choice)
                        local price = cfg.price.repair
                        local payment = false
                        if gpay == "bank" then
                            payment = zRP.tryFullPayment(user_id,price)
                        elseif gpay == "wallet" then
                            payment = zRP.tryPayment(user_id,price)
                        end
                        if payment then
                            if price > 0 then
                                zRPclient.notify(source,lang.money.paid({price}))
                            end
                            Gclient.repairVehicle(source)
                        else
                            zRPclient.notify(source,lang.money.not_enough())
                        end
                    end
                    submenu[lang.garage.shop.repair.title()] = {ch_repair,lang.garage.shop.repair.info({})}

                    zRP.openMenu(source,submenu)
                    Gclient.protectVehicle(source,true)
                end
            end,lang.garage.shop.description()}
        end
    end


    zRP.openMenu(source,menu)
end


local function build_client_garages(source)
    local user_id = zRP.getUserId(source)
    local address = zRP.getUserAddress(user_id)
    if user_id then
        for k,v in pairs(cfg.garages) do
            local gid,x,y,z = table.unpack(v)
            local vehicles = cfg.adv_garages[gid]

            if vehicles then
                local gcfg = vehicles._config

                if not address then address = {} end
                if not gcfg.ghome or gcfg.ghome == address.home then
                    -- enter
                    local garage_enter = function(player,area)
                        local user_id = zRP.getUserId(source)
                        if user_id and zRP.hasPermissions(user_id,gcfg.permissions or {}) then
                            zRP.advGaragesOpen(source,gid,{ x, y, z})
                        end
                    end

                    -- leave
                    local garage_leave = function(player,area)
                        zRP.closeMenu(source)
                        zRP.closeMenu(source)
                        zRP.closeMenu(source)
                        zRP.closeMenu(source)
                        zRP.closeMenu(source)
                    end

                    if gcfg.blipid then
                        zRPclient.addBlip(source,x,y,z,gcfg.blipid,gcfg.blipcolor,lang.garage.title({gid}))
                    end
                    zRPclient.addMarker(source,x,y,z-1,1.5,1.5,0.7,0,125,255,125,150)

                    zRP.setArea(source,"zRP:garage"..k,x,y,z,2,2,garage_enter,garage_leave)
                end
            end
        end
    end
end
