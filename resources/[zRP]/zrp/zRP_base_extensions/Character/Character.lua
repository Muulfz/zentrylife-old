---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Muulfz.
--- DateTime: 11/17/2018 7:54 PM
---
local config = zRPBase.config

-- return character id or nil in case of error (if not found, will create it)
function zRP.getCharacterIdByIdentifiers(ids)
    if ids and #ids then
        -- search identifiers
        for i = 1, #ids do
            if not config.ignore_ip_identifier or (string.find(ids[i], "ip:") == nil) then
                -- ignore ip identifier
                local rows = zRP.query("zRP/characterid_byidentifier", { identifier = ids[i] })
                if #rows > 0 then
                    -- found
                    return rows[1].character_id
                end
            end
        end

        -- no ids found, create character
        local rows, affected = zRP.query("zRP/create_character", {})

        if #rows > 0 then
            local character_id = rows[1].id
            -- add identifiers
            for l, w in pairs(ids) do
                if not config.ignore_ip_identifier or (string.find(w, "ip:") == nil) then
                    -- ignore ip identifier
                    zRP.execute("zRP/add_identifier", { character_id = character_id, identifier = w })
                end
            end

            return character_id
        end
    end
end

-- return identification string for the source (used for non zRP identifications, for rejected players)
function zRP.getSourceIdKey(source)
    local ids = GetPlayerIdentifiers(source)
    local idk = "idk_"
    for k, v in pairs(ids) do
        idk = idk .. v
    end

    return idk
end

--- sql
function zRP.isBanned(character_id, cbr)
    local rows = zRP.query("zRP/get_banned", { character_id = character_id })
    if #rows > 0 then
        return rows[1].banned
    else
        return false
    end
end

--- sql
function zRP.setBanned(character_id, banned)
    zRP.execute("zRP/set_banned", { character_id = character_id, banned = banned })
end

--- sql
function zRP.isWhitelisted(character_id, cbr)
    local rows = zRP.query("zRP/get_whitelisted", { character_id = character_id })
    if #rows > 0 then
        return rows[1].whitelisted
    else
        return false
    end
end

--- sql
function zRP.setWhitelisted(character_id, whitelisted)
    zRP.execute("zRP/set_whitelisted", { character_id = character_id, whitelisted = whitelisted })
end

--- sql
function zRP.getLastLogin(character_id, cbr)
    local rows = zRP.query("zRP/get_last_login", { character_id = character_id })
    if #rows > 0 then
        return rows[1].last_login
    else
        return ""
    end
end

function zRP.setUData(character_id, key, value)
    zRP.execute("zRP/set_characterdata", { character_id = character_id, key = key, value = value })
end

function zRP.getUData(character_id, key, cbr)
    local rows = zRP.query("zRP/get_characterdata", { character_id = character_id, key = key })
    if #rows > 0 then
        return rows[1].dvalue
    else
        return ""
    end
end

-- return character data table for zRP internal persistant connected character storage
function zRP.getCharacterDataTable(character_id)
    return zRP.character_tables[character_id]
end

function zRP.getCharacterTmpTable(character_id)
    return zRP.character_tmp_tables[character_id]
end

-- return the player spawn count (0 = not spawned, 1 = first spawn, ...)
function zRP.getSpawns(character_id)
    local tmp = zRP.getCharacterTmpTable(character_id)
    if tmp then
        return tmp.spawns or 0
    end

    return 0
end

function zRP.getCharacterId(source)
    if source ~= nil then
        local ids = GetPlayerIdentifiers(source)
        if ids ~= nil and #ids > 0 then
            return zRP.characters[ids[1]]
        end
    end

    return nil
end

-- return source or nil
function zRP.getCharacterSource(character_id)
    return zRP.character_sources[character_id]
end
